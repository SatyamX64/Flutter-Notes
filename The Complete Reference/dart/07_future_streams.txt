>> When we run this code, Future is bright will be printed after 4-5 Seconds  


    int processData(int param1, double, param2) {
        // takes 4 or 5 seconds to execute...
    }
    void main() {
        final data = processData(31, 2.5);
        print("func result = $data");
        print("Future is bright");
    }

>> • Using then.
 
    Future fun(...){
        ...
    }  returns a Future instantly, and keep running this function in background, while normal execution continues
       as soon as the result is ready, it calls the then callback 
    
    Now future is bright will be printed instantly, and the then block will be executed after 4-5 seconds

    Future<int> processData(int param1, double param2) {
    // function that takes 4 or 5 seconds to execute...
    }


    void main() {
    final process = processData(1, 2.5);
    process.then((data) => print("result = $data"));
    print("future is bright");
    }

    • Using async and await.
    Future<void> main() async {
    final data = await processData(1, 2.5);
    print("result = $data");
    }

    // Future<void> is immediately returned by main and function starts in background
    // anything after await, only executes when processData has completed
    // function finally return void now

# Streams are like async or sync events that we can listen to
    sync events result in a iterable
    async events result in a Stream

# generator : generates some data in interval and pushses down the stream
  stream : this is where the data goes in 
  subscriber : consume the data coming from stream

# To make generator :
    they must have async*
    must not return anything (we use yield to push down data in stream)

    eg : 
    Stream<int> randomNumbers() async* { // 1.
        final random = Random();
        for(var i = 0; i < 100; ++i) { // 2.
            await Future.delayed(Duration(seconds: 1)); // 3.
            yield random.nextInt(50) + 1; // 4.
        }
    } 
    
    // It's sync counterpart 
    
    Iterable<int> randomNumbers() sync* {
        final random = Random();
        for(var i = 0; i < 100; ++i) {
            sleep(Duration(seconds:1));
            yield random.nextInt(50) + 1;
        }
    }

We can also make streams, using the named constructors
    eg : final stream = Stream<int>.periodic(
        const Duration(seconds: 2),
        (count) => random.nextInt(10)
    );

    final stream = Stream<String>.value("Hello");
    // Creates a new stream that emits a single event before completing

    final stream = Stream<double>.fromIterable(const <double>[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]);
    // Creates a new single-subscription stream that only emits the values in the list.


// Here is how we split streams

    Stream<int> numberGenerator(bool even) async* {
    if (even) {
        yield 0;
        yield* evenNumbersUpToTen();
        yield 0;
    } else {
        yield -1;
        yield* oddNumbersUpToTen();
        yield -1;
    }
    }
    Stream<int> evenNumbersUpToTen() async* { ... }
    Stream<int> oddNumbersUpToTen() async* { ... }

// Basically yield* is used to "pause" the execution and start emitting values from the other stream;
   once finished, the source stream is "restarted" so that it can regularly send its values again.

// In practice yield* is used to say "stop here, emit values from the other stream and when it’s 
   completed you’re free to restart your regular flow". 

## Stream Controller

That's what we use mostly, while dealing with Streams.